{"version":3,"sources":["Snake.js","ScoreComponent.js","LeftComponent.js","Util.js","EmptyGame.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","informGameFinished","gameFinished","updateScore","currentScore","initDefaults","state","snake","x","initialXPos","movementUnit","y","initialYPos","score","handleChangeDirection","bind","assertThisInitialized","dx","dy","gameWidth","gameHeight","foodX","foodY","gameSpeed","eatScoreUnit","_this2","window","addEventListener","passive","canv","refs","canvas","ctx","getContext","addRandomFood","drawFood","drawFullSnake","interval","setInterval","clearCanvas","checkForCollision","moveSnake","i","length","hitLeftWall","hitRightWall","hitTopWall","Math","floor","random","randomCoordinates","getRandomCoordinates","liesOnSnake","drawSnakeBlock","coordinates","removeEventListener","clearInterval","snakePart","fillStyle","strokestyle","fillRect","strokeRect","_this3","forEach","item","_this4","removeTail","checkIfFoodEaten","tempSnake","slice","newHead","unshift","pop","setState","event","keyPressed","keyCode","movingRight","movingUp","movingDown","movingLeft","react_default","a","createElement","style","flex","display","width","justifyContent","alignItems","ref","height","React","Component","ScoreComponent","className","highScore","LeftComponent","GAME_STARTED","GAME_FINISHED","bake_cookie","name","value","date","expirey","Date","cookie","JSON","stringify","location","host","toString","join","document","read_cookie","result","match","RegExp","parse","EmptyGame","playButtonClicked","playClicked","onClick","App","gameState","padding","src_LeftComponent","src_Snake","src_EmptyGame","src_ScoreComponent","Boolean","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.541eb706.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Snake extends React.Component {\n    constructor(props) {\n        super(props);\n        this.initDefaults();\n        this.state = {\n          snake:[\n            {x: this.initialXPos + 3*this.movementUnit, y: this.initialYPos},\n            {x: this.initialXPos + 2*this.movementUnit, y: this.initialYPos},\n            {x: this.initialXPos + this.movementUnit, y: this.initialYPos},\n            {x: this.initialXPos, y: this.initialYPos},\n          ],\n          score:0\n        }\n        \n        this.handleChangeDirection = this.handleChangeDirection.bind(this);\n      }\n    \n      initDefaults() {\n        this.movementUnit = 15;\n        this.initialXPos = 90;\n        this.initialYPos = 150\n    \n\n        // variables tracking speed and direction of snake\n        this.dx = this.movementUnit;\n        this.dy = 0;\n    \n        // canvas default\n        this.gameWidth = 640;\n        this.gameHeight = 400;\n      \n        //defaults\n        this.foodX = 300;\n        this.foodY = 300;\n    \n        // factor of game speed\n        // increase by 20\n        this.gameSpeed = 1;\n    \n        // score per food\n        this.eatScoreUnit = 10;\n      }\n\n      componentDidMount() {\n        window.addEventListener('keydown', this.handleChangeDirection, {passive:true});\n        let canv = this.refs.canvas;\n        this.ctx = canv.getContext(\"2d\");  \n        this.addRandomFood();\n        this.drawFood();\n        this.drawFullSnake();  \n       \n    \n        this.interval = window.setInterval(() => {\n          this.clearCanvas();\n          // console.log('check for coll', this.checkForCollision())\n          if(this.checkForCollision()) {\n            this.informGameFinished();\n          } else {\n            this.moveSnake();\n          }\n    \n          // this.moveSnake();\n    \n          // console.log('hello', this.state.snake);\n        \n          // this.setState();\n        }, (160 - this.gameSpeed*20) );\n      }\n    \n\n      informGameFinished = () => {\n        this.props.gameFinished();\n      }\n    \n      checkIfFoodEaten() {\n        // console.log('snake x and y', this.state.snake[0].x,\"   \" ,this.state.snake[0].y, 'this.food x and y', this.foodX , \"  \",this.foodY)\n        if(this.state.snake[0].x === this.foodX && this.state.snake[0].y === this.foodY) {\n          return true;\n        }\n        return false;\n      }\n    \n      // handleEatFood() {\n      //   let foodEaten = this.checkIfFoodEaten();\n      //   if(foodEaten) {\n    \n      //   } \n      // }\n    \n    \n      // if collided with self or with walls\n      checkForCollision() {\n        for(let i = 1; i < this.state.snake.length; i++) {\n          let collision = this.state.snake[0].x === this.state.snake[i].x &&\n          this.state.snake[0].y === this.state.snake[i].y \n        \n          if(collision) {\n            return true;\n          }\n        }\n        let hitLeftWall = this.state.snake[0].x < 0;\n        let hitRightWall = this.state.snake[0].x > this.gameWidth-this.movementUnit;\n        let hitTopWall = this.state.snake[0].y < 0;\n        let hitBottomWall = this.state.snake[0].y > this.gameHeight-this.movementUnit;\n    \n        return hitBottomWall || hitTopWall || hitRightWall || hitLeftWall;\n      }\n    \n      //get random x and y\n      getRandomCoordinates() {\n        // let randomFoodX = Math.floor(Math.random()*(this.gameWidth-this.movementUnit));\n        // let randomFoodY = Math.floor(Math.random()*(this.gameWidth-this.movementUnit));\n        // console.log('xinsi => ', this.gameWidth- this.movementUnit);\n    \n        let x = Math.floor((Math.random() * (this.gameWidth-this.movementUnit)));\n        x = x - x%this.movementUnit;\n        \n        let y = Math.floor((Math.random() * (this.gameHeight-this.movementUnit)));\n        y = y - y%this.movementUnit;\n      \n        return {x:x, y:y};\n      }\n    \n      // get random points \n      // check for validity\n      // draw on canvas\n      addRandomFood() {\n        let randomCoordinates = this.getRandomCoordinates();\n        \n        while(this.liesOnSnake(randomCoordinates)) {\n          randomCoordinates = this.getRandomCoordinates();\n        }\n    \n        this.foodX = randomCoordinates.x;\n        this.foodY = randomCoordinates.y; \n      }\n    \n      drawFood() {\n        this.drawSnakeBlock({x:this.foodX,y:this.foodY});\n      }\n    \n      //check if it lies on the snake\n      liesOnSnake(coordinates) {\n        for(let i = 0; i < this.state.snake.length; i++) {\n          if(coordinates.x === this.state.snake[i].x && coordinates.y === this.state.snake[i].y) {\n            return true\n          }\n        }\n        return false;\n      }\n    \n      componentWillUnmount() {\n        // listen for key down events\n        window.removeEventListener('keydown', this.handleChangeDirection, {passive:true});\n        clearInterval(this.interval)\n      }\n    \n      //draw the individual snake block\n      drawSnakeBlock(snakePart) {\n        this.ctx.fillStyle = \"white\";\n        this.ctx.strokestyle=\"green\"\n        this.ctx.fillRect(snakePart.x, snakePart.y, this.movementUnit, this.movementUnit);\n        this.ctx.strokeRect(snakePart.x, snakePart.y, this.movementUnit, this.movementUnit);\n      }\n    \n      // set the canvas to original black color\n      clearCanvas() {\n        this.ctx.fillStyle = \"#090a14\";\n        //  Select the colour for the border of the canvas\n        this.ctx.strokestyle = \"white\";\n        this.ctx.fillRect(0, 0, this.gameWidth, this.gameHeight);\n        // Draw a \"border\" around the entire canvas\n        this.ctx.strokeRect(0, 0, this.gameWidth, this.gameHeight);\n      }\n    \n      // go through the snake array and draw each block\n      drawFullSnake() {\n        this.state.snake.forEach((item) => this.drawSnakeBlock(item))\n      }\n    \n      componentDidUpdate() {\n        // console.log('update is called')\n        this.drawFullSnake();\n        this.drawFood();\n      }\n    \n      moveSnake() {\n        let removeTail = true;\n        let currentScore = this.state.score;\n    \n        if(this.checkIfFoodEaten()) {\n          removeTail = false;\n          this.addRandomFood();\n          currentScore = currentScore + this.eatScoreUnit;\n        }\n    \n        let tempSnake = this.state.snake.slice(0);\n        // console.log('x ==>', this.dx, 'y ===> ', this.dy);\n        let newHeadX = tempSnake[0].x + this.dx;\n        let newHeadY = tempSnake[0].y + this.dy;\n        let newHead = {x:newHeadX,y:newHeadY};\n        tempSnake.unshift(newHead);\n    \n        if(removeTail) {\n          tempSnake.pop();\n        }\n        this.setState({snake:tempSnake, score:currentScore}, () => this.updateScore(currentScore));\n      }\n    \n      updateScore = (currentScore) => {\n        this.props.updateScore(currentScore)  \n      }\n    \n      // decide the dx and dy based on key pressed\n      handleChangeDirection(event) {\n        // console.log('handle change direction called', event);\n        \n        const LEFT_KEY = 37;\n        const RIGHT_KEY = 39;\n        const UP_KEY = 38;\n        const DOWN_KEY = 40;\n      \n        \n        const keyPressed = event.keyCode;\n        \n        let movingRight = this.dx === this.movementUnit;\n        let movingUp = this.dy === -1 * this.movementUnit;\n        let movingDown = this.dy === this.movementUnit;\n        let movingLeft = this.dx === this.movementUnit * -1;\n    \n        if(keyPressed === LEFT_KEY && !movingRight) {\n          this.dy = 0;\n          this.dx = -1 * this.movementUnit;\n        }\n    \n        if(keyPressed === RIGHT_KEY && !movingLeft) {\n          this.dy = 0;\n          this.dx = this.movementUnit;\n        }\n    \n        if(keyPressed === UP_KEY && !movingDown) {\n          this.dy = -1 * this.movementUnit;\n          this.dx = 0;\n          // console.log('x ==>', this.dx, 'y ===> ', this.dy);\n        }\n    \n        if(keyPressed === DOWN_KEY && !movingUp) {\n          this.dy =this.movementUnit;\n          this.dx = 0;\n        }\n    \n      }\n    \n      render() {\n        // console.log('render function called');\n        \n        return (\n       \n           <div\n          style={{flex:1, display:'flex',\n          width:'100%',\n          justifyContent:'center', alignItems:'center'}}\n         >\n    \n           <canvas\n            ref='canvas'\n            width={this.gameWidth}\n            // width=\"100%\"\n            height={this.gameHeight}\n           >\n    \n           </canvas>\n       \n    \n         </div>\n        );\n      }\n    }\n\n\n\n\nexport default Snake;\n","import React from 'react';\nimport './App.css';\nclass ScoreComponent extends React.Component {\n    \n\n    render() {\n        // console.log(this.props.currentScore);\n        return(\n            <div\n                className=\"Score-root\"\n            >\n            \n                <div\n                    className=\"High-score\"\n                >\n                    High:\n                </div>\n\n                <div\n                    className=\"Score-quantity-high\"\n                >\n                    {this.props.highScore}\n                </div>\n\n                <div\n                    style = {{height:'160px'}}\n                >\n                </div>\n\n                <div\n                className=\"High-score\"\n\n                >\n                    Score:\n                </div>\n\n                <div\n                className=\"Score-quantity-current\"\n                >\n                    {this.props.currentScore}\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default ScoreComponent;","import React from 'react';\n\nclass LeftComponent extends React.Component {\n\n    render() {\n        return(\n            <div\n                className=\"Left-component\"\n            >\n\n                <div className=\"Snake-letter-style\">\n                    S\n                </div>\n            \n                <div className=\"Snake-letter-style\">\n                    N\n                </div>\n\n                <div className=\"Snake-letter-style\">\n                    A\n                </div>\n\n                <div className=\"Snake-letter-style\">\n                    K\n                </div>\n\n                <div className=\"Snake-letter-style\">\n                    E\n                </div>\n\n            </div>\n        )\n\n    }\n\n}\n\nexport default LeftComponent;","\nexport const GAME_STARTED = 1;\n\nexport const GAME_FINISHED = 2;\n\nexport const bake_cookie = (name, value,date) => {\n    let expirey = date instanceof Date ? '; expires='+date : null\n    var cookie = [name, '=', JSON.stringify(value), '; domain_.',\n     window.location.host.toString(), '; path=/;',expirey].join('');\n    document.cookie = cookie;\n}\n\n// reads a cookie according to the given name\nexport const read_cookie = (name) => {\n    var result = document.cookie.match(new RegExp(name + '=([^;]+)'));\n    result = result != null ? JSON.parse(result[1]) : [];\n    return result;\n}\n\nexport const delete_cookie = (name) => {\n    document.cookie = [name, '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/; domain.',\n     window.location.host.toString()].join('');\n}","import React from 'react';\n\nclass EmptyGame extends React.Component {\n\n    playButtonClicked = () => {\n        this.props.playClicked();\n    }\n\n    render() {\n        return(\n            <div\n                className=\"Play-button-cont\"\n            >\n\n            <div\n              className=\"Play-button-container\"  \n            >\n            \n                <div\n                    className=\"Play-button\"\n                    onClick={this.playButtonClicked}\n                >   \n\n                    PLAY\n\n                </div>\n        \n            </div>\n            \n          \n      \n           </div>\n        )\n    }\n}\n\nexport default EmptyGame;","import React, { Component } from 'react';\nimport './App.css';\nimport Snake from './Snake.js';\nimport ScoreComponent from './ScoreComponent';\nimport LeftComponent from './LeftComponent';\nimport {bake_cookie,read_cookie,GAME_STARTED,GAME_FINISHED} from './Util.js';\nimport EmptyGame from './EmptyGame.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let highScore = read_cookie(\"_hS\")\n    this.state ={\n      currentScore : 0,\n      gameState:GAME_FINISHED,\n      highScore:highScore,\n    }\n  }\n\n\n  playClicked = () => {\n    this.setState({\n      gameState:GAME_STARTED\n    })\n  } \n\n  gameFinished = () => {\n    if(this.state.currentScore > this.state.highScore) {\n      bake_cookie(\"_hS\", this.state.currentScore);\n    }\n\n    this.setState({\n      gameState:GAME_FINISHED,\n      currentScore:0,\n      highScore: read_cookie(\"_hS\")\n    })\n  }\n\n  updateScore = (currentScore) => {\n    // console.log(currentScore)\n    if(currentScore !== this.state.currentScore) {\n      this.setState({currentScore:currentScore});\n    }\n  }\n\n\n\n  render() {\n    // console.log('render function called');\n    \n    return (\n   \n      <div\n        className=\"App\">\n\n        <div\n          style={{flex:0.23,  padding:'24px'}}\n        >\n          <LeftComponent>\n          </LeftComponent>\n\n        </div>\n       \n        <div\n          style={{flex:0.54}}\n        >\n\n          {this.state.gameState === GAME_STARTED && <Snake\n            updateScore={this.updateScore}\n            gameFinished={this.gameFinished}\n          >\n          </Snake>}\n\n          {this.state.gameState === GAME_FINISHED &&\n            <EmptyGame\n              playClicked={this.playClicked}\n            >\n            \n            </EmptyGame>\n          }\n        \n        </div>\n\n        <div\n          style={{flex:0.23, padding:'24px'}}\n        >\n          <ScoreComponent\n            currentScore={this.state.currentScore}\n            highScore={this.state.highScore}\n          >\n          </ScoreComponent>\n        </div>\n\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}